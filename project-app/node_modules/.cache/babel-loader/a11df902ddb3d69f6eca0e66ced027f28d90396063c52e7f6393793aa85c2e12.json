{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OWNER\\\\Documents\\\\script\\\\html\\\\homework\\\\APL-project-html\\\\project-app\\\\src\\\\components\\\\Game\\\\Game.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChoiceDifficult = ({\n  setDifficult\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"choiceDifficult\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDifficult(4),\n      children: \"\\u7C21\\u55AE\\u6A21\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDifficult(5),\n      children: \"\\u6B63\\u5E38\\u6A21\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDifficult(6),\n      children: \"\\u56F0\\u96E3\\u6A21\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n_c = ChoiceDifficult;\nconst Card = props => {\n  _s();\n  const [className, setClassName] = useState('card');\n  const setClass = () => {\n    // setClassName((prev => prev +))\n\n    let classname = 'card';\n    if (props.isFlipped || props.isMatched) {\n      classname += ' flipped';\n    }\n    if (props.isMatched) {\n      classname += ' matched';\n    } else {\n      classname += ' notmatch';\n    }\n    return classname;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"card-back\",\n      children: props.emoji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"pKSwwOX3Q3+Qvn9ZJJzHHyZ8HD0=\");\n_c2 = Card;\nconst setDeck = columns => {\n  let newCards = [];\n  for (let i = 0; i < columns * 2; i++) {\n    const emoji = String.fromCodePoint(0x1f601 + i);\n    newCards.push({\n      key: nanoid(),\n      emoji\n    });\n    newCards.push({\n      key: nanoid(),\n      emoji\n    });\n  }\n  return newCards.sort(() => -0.5);\n};\nexport default function Game() {\n  _s2();\n  const [cards, setCards] = useState(setDeck(5));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedEmojis, setMatchedEmojis] = useState([]);\n  const difficultyGetter = columns => {\n    setCards(setDeck(columns));\n    setFlippedCards([]);\n    setMatchedEmojis([]);\n  };\n  const handleCardClick = cardObj => {\n    if (flippedCards.length < 2 && !matchedEmojis.includes(cardObj.emoji)) {\n      const newFlippedCards = [cardObj, ...flippedCards];\n      setFlippedCards(newFlippedCards);\n      if (newFlippedCards.length === 2) {\n        setTimeout(() => {\n          checkForMatch(newFlippedCards);\n        }, 500);\n      }\n    }\n  };\n  const checkForMatch = flippedCards => {\n    if (flippedCards[0].emoji === flippedCards[1].emoji) {\n      setMatchedEmojis(emojis => [flippedCards[0].emoji, ...emojis]);\n    }\n    setFlippedCards([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(ChoiceDifficult, {\n      setDifficult: difficultyGetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: cards.map(cardObj => /*#__PURE__*/_jsxDEV(Card, {\n        ...cardObj,\n        isMatched: matchedEmojis.includes(cardObj.emoji),\n        isFlipped: flippedCards.includes(cardObj),\n        onClick: () => handleCardClick(cardObj)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s2(Game, \"Q/D4ikgKYc0f82Q0pORm/OwsHO8=\");\n_c3 = Game;\n;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChoiceDifficult\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["React","useState","nanoid","jsxDEV","_jsxDEV","ChoiceDifficult","setDifficult","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","Card","props","_s","setClassName","setClass","classname","isFlipped","isMatched","emoji","_c2","setDeck","columns","newCards","i","String","fromCodePoint","push","key","sort","Game","_s2","cards","setCards","flippedCards","setFlippedCards","matchedEmojis","setMatchedEmojis","difficultyGetter","handleCardClick","cardObj","length","includes","newFlippedCards","setTimeout","checkForMatch","emojis","map","_c3","$RefreshReg$"],"sources":["C:/Users/OWNER/Documents/script/html/homework/APL-project-html/project-app/src/components/Game/Game.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {nanoid} from 'nanoid';\r\nimport './Game.css';\r\n\r\nconst ChoiceDifficult = ({setDifficult}) => {\r\n    return (\r\n        <div className=\"choiceDifficult\">\r\n            <button onClick={() => setDifficult(4)}>簡單模式</button>\r\n            <button onClick={() => setDifficult(5)}>正常模式</button>\r\n            <button onClick={() => setDifficult(6)}>困難模式</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Card = (props) => {\r\n    const [className,setClassName] = useState('card')\r\n\r\n    const setClass = () =>{\r\n\r\n        // setClassName((prev => prev +))\r\n\r\n\r\n        let classname = 'card'\r\n        if (props.isFlipped || props.isMatched){\r\n            classname += ' flipped'\r\n        }\r\n        if (props.isMatched) {\r\n            classname += ' matched'\r\n        }\r\n        else {\r\n            classname += ' notmatch'\r\n        }\r\n        return classname\r\n    }\r\n    return (\r\n        <div className={className}  onClick={props.onClick}>\r\n            <span className=\"card-back\">{props.emoji}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst setDeck = (columns) =>{\r\n    let newCards = [];\r\n    for (let i = 0; i < columns*2; i++) {\r\n        const emoji = String.fromCodePoint(0x1f601 + i);\r\n        newCards.push({key:nanoid(),emoji});\r\n        newCards.push({key:nanoid(),emoji});\r\n    }\r\n    return newCards.sort(() =>  - 0.5)\r\n}\r\n\r\nexport default function Game(){\r\n    const [cards, setCards] = useState(setDeck(5));\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [matchedEmojis, setMatchedEmojis] = useState([]);\r\n\r\n    const difficultyGetter = (columns) => {\r\n        setCards(setDeck(columns));\r\n        setFlippedCards([])\r\n        setMatchedEmojis([])\r\n    };\r\n\r\n    const handleCardClick = (cardObj) => {\r\n        if (flippedCards.length < 2 && !matchedEmojis.includes(cardObj.emoji)) {\r\n            const newFlippedCards = [cardObj,...flippedCards];\r\n            setFlippedCards(newFlippedCards);\r\n            if (newFlippedCards.length === 2) {\r\n                setTimeout(() => {checkForMatch(newFlippedCards);}, 500);\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkForMatch = (flippedCards) => {\r\n        if (flippedCards[0].emoji === flippedCards[1].emoji) {\r\n            setMatchedEmojis((emojis) => [flippedCards[0].emoji,...emojis]);\r\n        }\r\n        setFlippedCards([]);\r\n    };\r\n\r\n    return (\r\n        <main>\r\n            <ChoiceDifficult setDifficult={difficultyGetter} />\r\n            <div className=\"cards-container\">\r\n                {cards.map(cardObj => (\r\n                    <Card {...cardObj}\r\n                    isMatched={matchedEmojis.includes(cardObj.emoji)}\r\n                    isFlipped={flippedCards.includes(cardObj)}\r\n                    onClick={() => handleCardClick(cardObj)}/>\r\n                ))}\r\n            </div>\r\n        </main>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}