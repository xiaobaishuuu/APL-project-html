{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OWNER\\\\Documents\\\\script\\\\html\\\\homework\\\\APL-project-html\\\\project-app\\\\src\\\\components\\\\Game\\\\Game.jsx\",\n  _s = $RefreshSig$();\n// import React, { useLayoutEffect } from \"react\";\n// import { nanoid } from 'nanoid';\n// import './Game.css';\n\n// class ChoiceDifficult extends React.Component {\n//     difficultHandle = (event) => {\n//         let column;\n//         switch (event.target) {\n//             case this.easy:\n//                 column = 4;\n//                 break;\n//             case this.normal:\n//                 column = 6;\n//                 break;\n//             case this.hard:\n//                 column = 8;\n//                 break;\n//             default:\n//                 return;\n//         }\n//         this.props.diffcult(column);\n//     }\n\n//     render() {\n//         return (\n//             <div className=\"choiceDifficult\">\n//                 <button ref={current => this.easy = current}   onClick={this.difficultHandle}>簡單模式</button>\n//                 <button ref={current => this.normal = current} onClick={this.difficultHandle}>正常模式</button>\n//                 <button ref={current => this.hard = current}   onClick={this.difficultHandle}>困難模式</button>\n//             </div>\n//         );\n//     }\n// }\n\n// class Card extends React.Component {\n//     render() {\n//         return (\n//             <div className='card' onClick={this.props.filpCard}>\n//                 <span>{this.props.match ? this.props.emoji : ''}</span>\n//             </div>\n//         );\n//     }\n// }\n\n// export default class Game extends React.Component {\n//     state = {\n//         card: [],\n//         clickCards: [],\n//         matchedCards: []\n//     }\n\n//     cardGetter = (card) => {\n//         const { clickCards, matchedCards } = this.state;\n\n//         if (clickCards.length < 2 && !matchedCards.includes(card.id)) {\n//             this.setState({ clickCards: [...clickCards, card] }, () => {\n//                 if (this.state.clickCards.length === 2) {\n//                     setTimeout(this.checkCards, 1000);\n//                 }\n//             });\n//         }\n//     }\n\n//     checkCards = () => {\n//         const [firstCard, secondCard] = this.state.clickCards;\n\n//         if (firstCard.emoji === secondCard.emoji) {\n//             this.setState(prevState => ({\n//                 matchedCards: [...prevState.matchedCards, firstCard.id, secondCard.id],\n//                 clickCards: []\n//             }));\n//         } else {\n//             this.setState({ clickCards: [] });\n//         }\n//     }\n\n//     diffcultGetter = (column) => {\n//         let newState = { card: [] };\n//         for (let i = 0; i < column; i++) {\n//             const emoji = String.fromCodePoint(0x1f601 + i);\n//             newState.card.push({ id: nanoid(), emoji, match: false });\n//             newState.card.push({ id: nanoid(), emoji, match: false });\n//         }\n//         newState.card.sort(() => Math.random() - 0.5); // Shuffle cards\n//         this.setState(newState);\n//     }\n\n//     render() {\n//         return (\n//             <main>\n//                 <ChoiceDifficult diffcult={this.diffcultGetter} />\n//                 <div className=\"cards-container\">\n//                     {this.state.card.map(card => (\n//                         <Card key={card.id} cardGetter={() => this.cardGetter(card)} {...card} match={this.state.matchedCards.includes(card.id)}/>\n//                     ))}\n//                 </div>\n//             </main>\n//         );\n//     }\n// }\n\nimport React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChoiceDifficult = ({\n  setDifficult\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"choiceDifficult\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDifficult(4),\n      children: \"\\u7C21\\u55AE\\u6A21\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDifficult(5),\n      children: \"\\u6B63\\u5E38\\u6A21\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setDifficult(6),\n      children: \"\\u56F0\\u96E3\\u6A21\\u5F0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_c = ChoiceDifficult;\nconst Card = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    onClick: props.onClick,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: props.isFlipped ? props.emoji : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Card;\nexport default function Game() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedEmojis, setMatchedEmojis] = useState([]);\n  const handleCardClick = cardObj => {\n    if (flippedCards.length < 2 && !matchedEmojis.includes(cardObj.emoji)) {\n      let newFlippedCards = [...flippedCards, cardObj];\n      if (newFlippedCards.length === 2) {\n        checkForMatch(newFlippedCards);\n        setTimeout(1000);\n      }\n      setFlippedCards(newFlippedCards);\n    }\n  };\n  const checkForMatch = flippedCards => {\n    if (flippedCards[0].emoji === flippedCards[1].emoji) {\n      console.log(123);\n      setMatchedEmojis(emoji => [...emoji, emoji]);\n    }\n    console.log(234);\n    setFlippedCards([]);\n  };\n  const handleDifficult = columns => {\n    let newCards = [];\n    for (let i = 0; i < columns * 2; i++) {\n      const emoji = String.fromCodePoint(0x1f601 + i);\n      newCards.push({\n        key: nanoid(),\n        emoji\n      });\n      newCards.push({\n        key: nanoid(),\n        emoji\n      });\n    }\n    setCards(newCards.sort(() => Math.random() - 0.5));\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(ChoiceDifficult, {\n      setDifficult: handleDifficult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        ...card,\n        isFlipped: matchedEmojis.includes(card.emoji) || flippedCards.includes(card),\n        onClick: () => handleCardClick(card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"pgEulCvsRkgmgWHx1MOUWuKlzgA=\");\n_c3 = Game;\n;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChoiceDifficult\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["React","useState","nanoid","jsxDEV","_jsxDEV","ChoiceDifficult","setDifficult","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","Card","props","isFlipped","emoji","_c2","Game","_s","cards","setCards","flippedCards","setFlippedCards","matchedEmojis","setMatchedEmojis","handleCardClick","cardObj","length","includes","newFlippedCards","checkForMatch","setTimeout","console","log","handleDifficult","columns","newCards","i","String","fromCodePoint","push","key","sort","Math","random","map","card","id","_c3","$RefreshReg$"],"sources":["C:/Users/OWNER/Documents/script/html/homework/APL-project-html/project-app/src/components/Game/Game.jsx"],"sourcesContent":["// import React, { useLayoutEffect } from \"react\";\r\n// import { nanoid } from 'nanoid';\r\n// import './Game.css';\r\n\r\n// class ChoiceDifficult extends React.Component {\r\n//     difficultHandle = (event) => {\r\n//         let column;\r\n//         switch (event.target) {\r\n//             case this.easy:\r\n//                 column = 4;\r\n//                 break;\r\n//             case this.normal:\r\n//                 column = 6;\r\n//                 break;\r\n//             case this.hard:\r\n//                 column = 8;\r\n//                 break;\r\n//             default:\r\n//                 return;\r\n//         }\r\n//         this.props.diffcult(column);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"choiceDifficult\">\r\n//                 <button ref={current => this.easy = current}   onClick={this.difficultHandle}>簡單模式</button>\r\n//                 <button ref={current => this.normal = current} onClick={this.difficultHandle}>正常模式</button>\r\n//                 <button ref={current => this.hard = current}   onClick={this.difficultHandle}>困難模式</button>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// class Card extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <div className='card' onClick={this.props.filpCard}>\r\n//                 <span>{this.props.match ? this.props.emoji : ''}</span>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default class Game extends React.Component {\r\n//     state = {\r\n//         card: [],\r\n//         clickCards: [],\r\n//         matchedCards: []\r\n//     }\r\n\r\n//     cardGetter = (card) => {\r\n//         const { clickCards, matchedCards } = this.state;\r\n\r\n//         if (clickCards.length < 2 && !matchedCards.includes(card.id)) {\r\n//             this.setState({ clickCards: [...clickCards, card] }, () => {\r\n//                 if (this.state.clickCards.length === 2) {\r\n//                     setTimeout(this.checkCards, 1000);\r\n//                 }\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     checkCards = () => {\r\n//         const [firstCard, secondCard] = this.state.clickCards;\r\n\r\n//         if (firstCard.emoji === secondCard.emoji) {\r\n//             this.setState(prevState => ({\r\n//                 matchedCards: [...prevState.matchedCards, firstCard.id, secondCard.id],\r\n//                 clickCards: []\r\n//             }));\r\n//         } else {\r\n//             this.setState({ clickCards: [] });\r\n//         }\r\n//     }\r\n\r\n//     diffcultGetter = (column) => {\r\n//         let newState = { card: [] };\r\n//         for (let i = 0; i < column; i++) {\r\n//             const emoji = String.fromCodePoint(0x1f601 + i);\r\n//             newState.card.push({ id: nanoid(), emoji, match: false });\r\n//             newState.card.push({ id: nanoid(), emoji, match: false });\r\n//         }\r\n//         newState.card.sort(() => Math.random() - 0.5); // Shuffle cards\r\n//         this.setState(newState);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <main>\r\n//                 <ChoiceDifficult diffcult={this.diffcultGetter} />\r\n//                 <div className=\"cards-container\">\r\n//                     {this.state.card.map(card => (\r\n//                         <Card key={card.id} cardGetter={() => this.cardGetter(card)} {...card} match={this.state.matchedCards.includes(card.id)}/>\r\n//                     ))}\r\n//                 </div>\r\n//             </main>\r\n//         );\r\n//     }\r\n// }\r\n\r\nimport React, { useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport './Game.css';\r\n\r\nconst ChoiceDifficult = ({ setDifficult }) => {\r\n    return (\r\n        <div className=\"choiceDifficult\">\r\n            <button onClick={() => setDifficult(4)}>簡單模式</button>\r\n            <button onClick={() => setDifficult(5)}>正常模式</button>\r\n            <button onClick={() => setDifficult(6)}>困難模式</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='card' onClick={props.onClick}>\r\n            <span>{props.isFlipped ? props.emoji : ''}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default function Game(){\r\n    const [cards, setCards] = useState([]);\r\n    const [flippedCards, setFlippedCards] = useState([]);\r\n    const [matchedEmojis, setMatchedEmojis] = useState([]);\r\n\r\n    const handleCardClick = (cardObj) => {\r\n        if (flippedCards.length < 2 && !matchedEmojis.includes(cardObj.emoji)) {\r\n            let newFlippedCards = [...flippedCards,cardObj]\r\n            if (newFlippedCards.length === 2) {\r\n                checkForMatch(newFlippedCards)\r\n                setTimeout(1000);\r\n            }\r\n            setFlippedCards(newFlippedCards);\r\n        }\r\n    };\r\n\r\n    const checkForMatch = (flippedCards) => {\r\n        if (flippedCards[0].emoji === flippedCards[1].emoji) {\r\n            console.log(123)\r\n            setMatchedEmojis((emoji) => [...emoji,emoji]);\r\n        }\r\n        console.log(234)\r\n        setFlippedCards([]);\r\n    };\r\n\r\n    const handleDifficult = (columns) => {\r\n        let newCards = [];\r\n        for (let i = 0; i < columns*2; i++) {\r\n            const emoji = String.fromCodePoint(0x1f601 + i);\r\n            newCards.push({ key: nanoid(), emoji });\r\n            newCards.push({ key: nanoid(), emoji });\r\n        }\r\n        setCards(newCards.sort(() => Math.random() - 0.5));\r\n    };\r\n\r\n    return (\r\n        <main>\r\n            <ChoiceDifficult setDifficult={handleDifficult} />\r\n            <div className=\"cards-container\">\r\n                {cards.map(card => (\r\n                    <Card key={card.id} {...card}\r\n                        isFlipped={matchedEmojis.includes(card.emoji) || flippedCards.includes(card)}\r\n                        onClick={() => handleCardClick(card)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </main>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}