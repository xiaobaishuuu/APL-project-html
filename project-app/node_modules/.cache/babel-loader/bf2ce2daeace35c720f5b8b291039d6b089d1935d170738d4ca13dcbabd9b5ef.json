{"ast":null,"code":"// import React, { useLayoutEffect } from \"react\";\n// import { nanoid } from 'nanoid';\n// import './Game.css';\n\n// class ChoiceDifficult extends React.Component {\n//     difficultHandle = (event) => {\n//         let column;\n//         switch (event.target) {\n//             case this.easy:\n//                 column = 4;\n//                 break;\n//             case this.normal:\n//                 column = 6;\n//                 break;\n//             case this.hard:\n//                 column = 8;\n//                 break;\n//             default:\n//                 return;\n//         }\n//         this.props.diffcult(column);\n//     }\n\n//     render() {\n//         return (\n//             <div className=\"choiceDifficult\">\n//                 <button ref={current => this.easy = current}   onClick={this.difficultHandle}>簡單模式</button>\n//                 <button ref={current => this.normal = current} onClick={this.difficultHandle}>正常模式</button>\n//                 <button ref={current => this.hard = current}   onClick={this.difficultHandle}>困難模式</button>\n//             </div>\n//         );\n//     }\n// }\n\n// class Card extends React.Component {\n//     render() {\n//         return (\n//             <div className='card' onClick={this.props.filpCard}>\n//                 <span>{this.props.match ? this.props.emoji : ''}</span>\n//             </div>\n//         );\n//     }\n// }\n\n// export default class Game extends React.Component {\n//     state = {\n//         card: [],\n//         clickCards: [],\n//         matchedCards: []\n//     }\n\n//     cardGetter = (card) => {\n//         const { clickCards, matchedCards } = this.state;\n\n//         if (clickCards.length < 2 && !matchedCards.includes(card.id)) {\n//             this.setState({ clickCards: [...clickCards, card] }, () => {\n//                 if (this.state.clickCards.length === 2) {\n//                     setTimeout(this.checkCards, 1000);\n//                 }\n//             });\n//         }\n//     }\n\n//     checkCards = () => {\n//         const [firstCard, secondCard] = this.state.clickCards;\n\n//         if (firstCard.emoji === secondCard.emoji) {\n//             this.setState(prevState => ({\n//                 matchedCards: [...prevState.matchedCards, firstCard.id, secondCard.id],\n//                 clickCards: []\n//             }));\n//         } else {\n//             this.setState({ clickCards: [] });\n//         }\n//     }\n\n//     diffcultGetter = (column) => {\n//         let newState = { card: [] };\n//         for (let i = 0; i < column; i++) {\n//             const emoji = String.fromCodePoint(0x1f601 + i);\n//             newState.card.push({ id: nanoid(), emoji, match: false });\n//             newState.card.push({ id: nanoid(), emoji, match: false });\n//         }\n//         newState.card.sort(() => Math.random() - 0.5); // Shuffle cards\n//         this.setState(newState);\n//     }\n\n//     render() {\n//         return (\n//             <main>\n//                 <ChoiceDifficult diffcult={this.diffcultGetter} />\n//                 <div className=\"cards-container\">\n//                     {this.state.card.map(card => (\n//                         <Card key={card.id} cardGetter={() => this.cardGetter(card)} {...card} match={this.state.matchedCards.includes(card.id)}/>\n//                     ))}\n//                 </div>\n//             </main>\n//         );\n//     }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/OWNER/Documents/script/html/homework/APL-project-html/project-app/src/components/Game/Game.jsx"],"sourcesContent":["// import React, { useLayoutEffect } from \"react\";\r\n// import { nanoid } from 'nanoid';\r\n// import './Game.css';\r\n\r\n// class ChoiceDifficult extends React.Component {\r\n//     difficultHandle = (event) => {\r\n//         let column;\r\n//         switch (event.target) {\r\n//             case this.easy:\r\n//                 column = 4;\r\n//                 break;\r\n//             case this.normal:\r\n//                 column = 6;\r\n//                 break;\r\n//             case this.hard:\r\n//                 column = 8;\r\n//                 break;\r\n//             default:\r\n//                 return;\r\n//         }\r\n//         this.props.diffcult(column);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"choiceDifficult\">\r\n//                 <button ref={current => this.easy = current}   onClick={this.difficultHandle}>簡單模式</button>\r\n//                 <button ref={current => this.normal = current} onClick={this.difficultHandle}>正常模式</button>\r\n//                 <button ref={current => this.hard = current}   onClick={this.difficultHandle}>困難模式</button>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// class Card extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <div className='card' onClick={this.props.filpCard}>\r\n//                 <span>{this.props.match ? this.props.emoji : ''}</span>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default class Game extends React.Component {\r\n//     state = {\r\n//         card: [],\r\n//         clickCards: [],\r\n//         matchedCards: []\r\n//     }\r\n\r\n//     cardGetter = (card) => {\r\n//         const { clickCards, matchedCards } = this.state;\r\n\r\n//         if (clickCards.length < 2 && !matchedCards.includes(card.id)) {\r\n//             this.setState({ clickCards: [...clickCards, card] }, () => {\r\n//                 if (this.state.clickCards.length === 2) {\r\n//                     setTimeout(this.checkCards, 1000);\r\n//                 }\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     checkCards = () => {\r\n//         const [firstCard, secondCard] = this.state.clickCards;\r\n\r\n//         if (firstCard.emoji === secondCard.emoji) {\r\n//             this.setState(prevState => ({\r\n//                 matchedCards: [...prevState.matchedCards, firstCard.id, secondCard.id],\r\n//                 clickCards: []\r\n//             }));\r\n//         } else {\r\n//             this.setState({ clickCards: [] });\r\n//         }\r\n//     }\r\n\r\n//     diffcultGetter = (column) => {\r\n//         let newState = { card: [] };\r\n//         for (let i = 0; i < column; i++) {\r\n//             const emoji = String.fromCodePoint(0x1f601 + i);\r\n//             newState.card.push({ id: nanoid(), emoji, match: false });\r\n//             newState.card.push({ id: nanoid(), emoji, match: false });\r\n//         }\r\n//         newState.card.sort(() => Math.random() - 0.5); // Shuffle cards\r\n//         this.setState(newState);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <main>\r\n//                 <ChoiceDifficult diffcult={this.diffcultGetter} />\r\n//                 <div className=\"cards-container\">\r\n//                     {this.state.card.map(card => (\r\n//                         <Card key={card.id} cardGetter={() => this.cardGetter(card)} {...card} match={this.state.matchedCards.includes(card.id)}/>\r\n//                     ))}\r\n//                 </div>\r\n//             </main>\r\n//         );\r\n//     }\r\n// }"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}